#ifndef _UEFI_PROTOCOLS_FILEPROTOCOL_H
#define _UEFI_PROTOCOLS_FILEPROTOCOL_H

#include "../Common.h"

#define EFI_FILE_PROTOCOL_REVISION 0x00010000
#define EFI_FILE_PROTOCOL_REVISION2 0x00020000
#define EFI_FILE_PROTOCOL_LATEST_REVISION EFI_FILE_PROTOCOL_REVISION2

#define EFI_FILE_MODE_READ 0x0000000000000001
#define EFI_FILE_MODE_WRITE 0x0000000000000002
#define EFI_FILE_MODE_CREATE 0x8000000000000000

#define EFI_FILE_READ_ONLY 0x0000000000000001
#define EFI_FILE_HIDDEN 0x0000000000000002
#define EFI_FILE_SYSTEM 0x0000000000000004
#define EFI_FILE_RESERVED 0x0000000000000008
#define EFI_FILE_DIRECTORY 0x0000000000000010
#define EFI_FILE_ARCHIVE 0x0000000000000020
#define EFI_FILE_VALID_ATTR 0x0000000000000037

typedef struct _EFI_FILE_IO_TOKEN {
    EFI_EVENT Event;
    EFI_STATUS Status;
    UINTN BufferSize;
    VOID* Buffer;
} EFI_FILE_IO_TOKEN;

struct _EFI_FILE_PROTOCOL;

typedef EFI_STATUS (*EFI_FILE_OPEN)(struct _EFI_FILE_PROTOCOL* This, struct _EFI_FILE_PROTOCOL** NewHandle, CHAR16* FileName, UINT64 OpenMode, UINT64 Attributes);
typedef EFI_STATUS (*EFI_FILE_CLOSE)(struct _EFI_FILE_PROTOCOL* This);
typedef EFI_STATUS (*EFI_FILE_DELETE)(struct _EFI_FILE_PROTOCOL* This);
typedef EFI_STATUS (*EFI_FILE_READ)(struct _EFI_FILE_PROTOCOL* This, UINTN* BufferSize, VOID* Buffer);
typedef EFI_STATUS (*EFI_FILE_WRITE)(struct _EFI_FILE_PROTOCOL* This, UINTN* BufferSize, VOID* Buffer);
typedef EFI_STATUS (*EFI_FILE_GET_POSITION)(struct _EFI_FILE_PROTOCOL* This, UINT64* Position);
typedef EFI_STATUS (*EFI_FILE_SET_POSITION)(struct _EFI_FILE_PROTOCOL* This, UINT64 Position);
typedef EFI_STATUS (*EFI_FILE_GET_INFO)(struct _EFI_FILE_PROTOCOL* This, EFI_GUID* InformationType, UINTN* BufferSize, VOID* Buffer);
typedef EFI_STATUS (*EFI_FILE_SET_INFO)(struct _EFI_FILE_PROTOCOL* This, EFI_GUID* InformationType, UINTN BufferSize, VOID* Buffer);
typedef EFI_STATUS (*EFI_FILE_FLUSH)(struct _EFI_FILE_PROTOCOL* This);
typedef EFI_STATUS (*EFI_FILE_OPEN_EX)(struct _EFI_FILE_PROTOCOL* This, struct _EFI_FILE_PROTOCOL** NewHandle, CHAR16* FileName, UINT64 OpenMode, UINT64 Attributes, EFI_FILE_IO_TOKEN* Token);
typedef EFI_STATUS (*EFI_FILE_READ_EX)(struct _EFI_FILE_PROTOCOL* This, EFI_FILE_IO_TOKEN* Token);
typedef EFI_STATUS (*EFI_FILE_WRITE_EX)(struct _EFI_FILE_PROTOCOL* This, EFI_FILE_IO_TOKEN* Token);
typedef EFI_STATUS (*EFI_FILE_FLUSH_EX)(struct _EFI_FILE_PROTOCOL* This, EFI_FILE_IO_TOKEN* Token);

typedef struct _EFI_FILE_PROTOCOL {
    UINT64 Revision;
    EFI_FILE_OPEN Open;
    EFI_FILE_CLOSE Close;
    EFI_FILE_DELETE Delete;
    EFI_FILE_READ Read;
    EFI_FILE_WRITE Write;
    EFI_FILE_GET_POSITION GetPosition;
    EFI_FILE_SET_POSITION SetPosition;
    EFI_FILE_GET_INFO GetInfo;
    EFI_FILE_SET_INFO SetInfo;
    EFI_FILE_FLUSH Flush;
    EFI_FILE_OPEN_EX OpenEx; // Added for revision 2
    EFI_FILE_READ_EX ReadEx; // Added for revision 2
    EFI_FILE_WRITE_EX WriteEx; // Added for revision 2
    EFI_FILE_FLUSH_EX FlushEx; // Added for revision 2
} EFI_FILE_PROTOCOL;

#endif // _UEFI_PROTOCOLS_FILEPROTOCOL_H
