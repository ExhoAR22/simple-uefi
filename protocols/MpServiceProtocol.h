#ifndef _UEFI_PROTOCOLS_MPSERVICEPROTOCOL_H
#define _UEFI_PROTOCOLS_MPSERVICEPROTOCOL_H

#include "../Common.h"

#define EFI_MP_SERVICES_PROTOCOL_GUID { 0x3fdda605, 0xa76e, 0x4f46, { 0xad, 0x29, 0x12, 0xf4, 0x53, 0x1b, 0x3d, 0x08 } }

typedef struct _EFI_MP_SERVICES_PROTOCOL EFI_MP_SERVICES_PROTOCOL;

typedef struct _EFI_CPU_PHYSICAL_LOCATION {
    UINT32 Package;
    UINT32 Core;
    UINT32 Thread;
} EFI_CPU_PHYSICAL_LOCATION;

typedef struct _EFI_CPU_PHYSICAL_LOCATION2 {
    UINT32 Package;
    UINT32 Module;
    UINT32 Tile;
    UINT32 Die;
    UINT32 Core;
    UINT32 Thread;
} EFI_CPU_PHYSICAL_LOCATION2;

typedef union _EXTENDED_PROCESSOR_INFORMATION {
    EFI_CPU_PHYSICAL_LOCATION2 Location2;
} EXTENDED_PROCESSOR_INFORMATION;

typedef struct _EFI_PROCESSOR_INFORMATION {
    UINT64 ProcessorId;
    UINT32 StatusFlag;
    EFI_CPU_PHYSICAL_LOCATION Location;
    EXTENDED_PROCESSOR_INFORMATION ExtendedInformation;
} EFI_PROCESSOR_INFORMATION;

typedef VOID (*EFI_AP_PROCEDURE)(VOID* Buffer);

typedef EFI_STATUS (*EFI_MP_SERVICES_GET_NUMBER_OF_PROCESSORS)(EFI_MP_SERVICES_PROTOCOL* This,
        UINTN* NumberOfProcessors, UINTN* NumberOfEnabledProcessors);

typedef EFI_STATUS (*EFI_MP_SERVICES_GET_PROCESSOR_INFO)(EFI_MP_SERVICES_PROTOCOL* This, UINTN ProcessorNumber,
        EFI_PROCESSOR_INFORMATION* ProcessorInfoBuffer);

typedef EFI_STATUS (*EFI_MP_SERVICES_STARTUP_ALL_APS)(EFI_MP_SERVICES_PROTOCOL* This, EFI_AP_PROCEDURE Procedure,
        BOOLEAN SingleThread, EFI_EVENT WaitEvent, UINTN TimeoutInMicroSeconds, VOID* ProcedureArgument,
        UINTN** FailedCpuList);

typedef EFI_STATUS (*EFI_MP_SERVICES_STARTUP_THIS_AP)(EFI_MP_SERVICES_PROTOCOL* This, EFI_AP_PROCEDURE Procedure,
        UINTN ProcessorNumber, EFI_EVENT WaitEvent, UINTN TimeoutInMicroseconds, VOID* ProcedureArgument,
        BOOLEAN* Finished);

typedef EFI_STATUS (*EFI_MP_SERVICES_SWITCH_BSP)(EFI_MP_SERVICES_PROTOCOL* This, UINTN ProcessorNumber,
        BOOLEAN EnableOldBSP);

typedef EFI_STATUS (*EFI_MP_SERVICES_ENABLEDISABLEAP)(EFI_MP_SERVICES_PROTOCOL* This, UINTN ProcessorNumber,
        BOOLEAN EnableAP, UINT32* HealthFlag);

typedef EFI_STATUS (*EFI_MP_SERVICES_WHOAMI)(EFI_MP_SERVICES_PROTOCOL* This, UINTN* ProcessorNumber);

struct _EFI_MP_SERVICES_PROTOCOL {
    EFI_MP_SERVICES_GET_NUMBER_OF_PROCESSORS GetNumberOfProcessors;
    EFI_MP_SERVICES_GET_PROCESSOR_INFO GetProcessorInfo;
    EFI_MP_SERVICES_STARTUP_ALL_APS StartupAllAPs;
    EFI_MP_SERVICES_STARTUP_THIS_AP StartupThisAP;
    EFI_MP_SERVICES_SWITCH_BSP SwitchBSP;
    EFI_MP_SERVICES_ENABLEDISABLEAP EnableDisableAP;
    EFI_MP_SERVICES_WHOAMI WhoAmI;
};

#endif // _UEFI_PROTOCOLS_MPSERVICEPROTOCOL_H
